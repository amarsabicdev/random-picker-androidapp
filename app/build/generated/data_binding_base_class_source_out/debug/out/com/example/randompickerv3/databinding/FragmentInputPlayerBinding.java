// Generated by view binder compiler. Do not edit!
package com.example.randompickerv3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.randompickerv3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentInputPlayerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton btnSumbitPlayer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final ConstraintLayout constraintLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final ConstraintLayout constraintLayout2;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final ConstraintLayout inputfragmentLayout;

  @NonNull
  public final EditText ipContactNumber;

  @NonNull
  public final EditText ipNameSurname;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout linearLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView textView2;

  @NonNull
  public final TextView textView6;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView textView9;

  private FragmentInputPlayerBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton btnSumbitPlayer, @Nullable ConstraintLayout constraintLayout,
      @Nullable ConstraintLayout constraintLayout2, @NonNull ImageView imageView,
      @NonNull ConstraintLayout inputfragmentLayout, @NonNull EditText ipContactNumber,
      @NonNull EditText ipNameSurname, @Nullable LinearLayout linearLayout,
      @Nullable TextView textView2, @NonNull TextView textView6, @Nullable TextView textView9) {
    this.rootView = rootView;
    this.btnSumbitPlayer = btnSumbitPlayer;
    this.constraintLayout = constraintLayout;
    this.constraintLayout2 = constraintLayout2;
    this.imageView = imageView;
    this.inputfragmentLayout = inputfragmentLayout;
    this.ipContactNumber = ipContactNumber;
    this.ipNameSurname = ipNameSurname;
    this.linearLayout = linearLayout;
    this.textView2 = textView2;
    this.textView6 = textView6;
    this.textView9 = textView9;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentInputPlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentInputPlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_input_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentInputPlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSumbitPlayer;
      AppCompatButton btnSumbitPlayer = ViewBindings.findChildViewById(rootView, id);
      if (btnSumbitPlayer == null) {
        break missingId;
      }

      id = R.id.constraintLayout;
      ConstraintLayout constraintLayout = ViewBindings.findChildViewById(rootView, id);

      id = R.id.constraintLayout2;
      ConstraintLayout constraintLayout2 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      ConstraintLayout inputfragmentLayout = (ConstraintLayout) rootView;

      id = R.id.ipContactNumber;
      EditText ipContactNumber = ViewBindings.findChildViewById(rootView, id);
      if (ipContactNumber == null) {
        break missingId;
      }

      id = R.id.ipNameSurname;
      EditText ipNameSurname = ViewBindings.findChildViewById(rootView, id);
      if (ipNameSurname == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.textView6;
      TextView textView6 = ViewBindings.findChildViewById(rootView, id);
      if (textView6 == null) {
        break missingId;
      }

      id = R.id.textView9;
      TextView textView9 = ViewBindings.findChildViewById(rootView, id);

      return new FragmentInputPlayerBinding((ConstraintLayout) rootView, btnSumbitPlayer,
          constraintLayout, constraintLayout2, imageView, inputfragmentLayout, ipContactNumber,
          ipNameSurname, linearLayout, textView2, textView6, textView9);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
